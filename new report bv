package com.demsIB.integration.bank.service;

import com.demsIB.integration.bank.dto.request.DispositionDumpDTO;
import com.demsIB.integration.bank.dto.request.ReportExcelDTO;
import org.apache.poi.ss.usermodel.Workbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.io.*;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

@Service
public class ReportSchedulerService {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    private final ReportExcelExportService excelReportService;
    private final DispositionDumpService dispositionDumpService;
    private final ReportService reportService;
    private final DispositionDumpExcelService dispositionDumpExcelService;

    public ReportSchedulerService(ReportExcelExportService excelReportService,
                                  DispositionDumpService dispositionDumpService, ReportService reportService, DispositionDumpExcelService dispositionDumpExcelService) {
        this.excelReportService = excelReportService;
        this.dispositionDumpService = dispositionDumpService;
        this.reportService = reportService;
        this.dispositionDumpExcelService = dispositionDumpExcelService;
    }

    @Value("${reports.networkPath}")
    private String networkPathUrl;

    @Value("${bank.report.name}")
    private String bankReportName;

    @Value("${disposition-dump.report.name}")
    private String dispositionDumpReportName;

    private void saveExcelToNetworkShare(Workbook workbook, String fileName) throws Exception {
        String networkPath = Paths.get(networkPathUrl, fileName).toString();
        try {
            File parentDir = new File(networkPathUrl);
            if (!parentDir.exists()) {
                throw new Exception("Network path does not exist: " + networkPathUrl);
            }
            if (!parentDir.canWrite()) {
                throw new Exception("No write permission to network path: " + networkPathUrl);
            }
            File targetFile = new File(networkPath);
            try (FileOutputStream out = new FileOutputStream(targetFile);
                 BufferedOutputStream bufferedOut = new BufferedOutputStream(out)) {
                workbook.write(bufferedOut);
                bufferedOut.flush();
            }
            logger.info("Excel file saved successfully to: {}", networkPath);
        } catch (IOException e) {
            logger.error("Failed to save Excel file to network share: {}", networkPath, e);
            throw new Exception("Unable to save report to network location: " + e.getMessage(), e);
        } finally {
            if (workbook != null) {
                try {
                    workbook.close();
                } catch (IOException e) {
                    logger.warn("Failed to close workbook", e);
                }
            }
        }
    }

    @Scheduled(cron = "${report.scheduler.time}")
    public void generateBankReport() {
        try {
            logger.info("Starting Block_Unblock_Dump report generation");
            LocalDate startDate = LocalDate.now().minusDays(1);
            LocalDate endDate = LocalDate.now().minusDays(1);
            List<ReportExcelDTO> reports = reportService.getReportsByDateRange(startDate, endDate);
            if (reports.isEmpty()) {
                logger.warn("No data found for date range: {} to {}", startDate, endDate);
                return;
            }
            Workbook workbook = excelReportService.generateExcelReport(reports, startDate, endDate);
            String filename = bankReportName + startDate + "_to_" + endDate + ".xlsx";
            saveExcelToNetworkShare(workbook, filename);
            logger.info("Block_Unblock_Dump report generated successfully: {}", filename);
        } catch (Exception e) {
            logger.error("Failed to generate Block_Unblock_Dump report", e);
        }
    }

    @Scheduled(cron = "${disposition-dump.scheduler.time}")
    public void generateDispositionDumpReport() throws Exception {
        try {
            logger.info("Generating Disposition Dump report");
            LocalDateTime startDate = LocalDateTime.now().minusDays(1).withHour(0).withMinute(0);
            LocalDateTime endDate = LocalDateTime.now().minusDays(1).withHour(23).withMinute(59);
            List<DispositionDumpDTO> reports = dispositionDumpService.getDispositionDumpByDateRange(startDate, endDate);
            if (reports.isEmpty()) {
                logger.warn("No data found for date range: {} to {}", startDate, endDate);
                return;
            }
            Workbook workbook = dispositionDumpExcelService.generateExcelReport(reports, startDate, endDate);
            String filename = dispositionDumpReportName +
                    startDate.format(DateTimeFormatter.ofPattern("yyyyMMdd")) + "_to_" +
                    endDate.format(DateTimeFormatter.ofPattern("yyyyMMdd")) + ".xlsx";
            saveExcelToNetworkShare(workbook, filename);
            logger.info("Disposition Dump report generated successfully");
        } catch (Exception e) {
            logger.error("Failed to generate Disposition Dump report", e);
        }
    }
}
bank.report.name=Block_Unblock_Dump__
report.query=SELECT interaction_id, call_id, agent_id, product_category, sub_category,resolution_code, date, time, mobile_number_last_4_digit, created_by FROM ib_bank_report WHERE date BETWEEN ? AND ?
report.columns= interaction_id,call_id,agent_id,product_category,sub_category,resolution_code,date,time,mobile_number_last_4_digit,created_by
report.headers= Interaction ID,Call ID,Agent ID,Product Category,Sub Category,Resolution Code,Date,Time,Mobile Last 4 Digits, Created By
report.scheduler.time=0 59 18 * * *

disposition-dump.report.name=DispositionDumpReport__
disposition-dump.query=SELECT um.login_id, sd.created_on, sd.created_by, sd.call_id, cm4.name AS Ticket_Type, cm3.name AS Category, cm2.name AS SubCategory, cm1.name AS Product_Category, sm.status_name AS Resolution_code FROM ib_service_details sd LEFT JOIN ib_category_master cm1 ON sd.category_id = cm1.category_id LEFT JOIN ib_category_master cm2 ON cm1.pid = cm2.category_id LEFT JOIN ib_category_master cm3 ON cm2.pid = cm3.category_id LEFT JOIN ib_category_master cm4 ON cm3.pid = cm4.category_id LEFT JOIN ib_status_master sm ON sd.status_id = sm.status_id LEFT JOIN ib_user_master um ON sd.created_by = um.user_id WHERE sd.call_id IS NOT NULL AND sd.call_id <> '' AND sd.created_on BETWEEN ? AND ? ORDER BY sd.created_on DESC
disposition-dump.columns=login_id,created_on,created_by,call_id,Ticket_Type,Category,SubCategory,Product_Category,Resolution_code
disposition-dump.headers=Login ID,Created On,Created BY,Call ID,Ticket Type,Category,SubCategory,Product Category,Resolution Code
disposition-dump.scheduler.time=0 59 18 * * *
reports.networkPath=\\\\AZIBDCCRMDB01\\Reports\\
