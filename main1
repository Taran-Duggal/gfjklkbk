import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;
import javax.annotation.PostConstruct;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;

@Configuration
public class PropertyDecryptor {
    
    private final Environment env;
    private static final String PREFIX = "DEC(";
    private static final String SUFFIX = ")";
    
    // Map of property keys that need decryption
    private static final Map<String, String> DECRYPTION_KEYS = Map.of(
        "spring.datasource.password", "spring.datasource.password",
        "jwt.secret", "jwt.secret",
        "kms.service.password", "kms.service.password",
        "ob.service.password", "ob.service.password",
        "bank.certificates.private-cert-password", "bank.certificates.private-cert-password",
        "bank.api.session-key", "bank.api.session-key",
        "bank.api.client-secret", "bank.api.client-secret"
    );
    
    public PropertyDecryptor(Environment env) {
        this.env = env;
    }
    
    @PostConstruct
    public void decryptProperties() {
        DECRYPTION_KEYS.forEach((srcKey, targetKey) -> {
            String value = env.getProperty(srcKey);
            if (value != null) {
                String decrypted = decrypt(value);
                System.setProperty(targetKey, decrypted);
                
                // Also set in environment for Spring usage
                if (!srcKey.equals(targetKey)) {
                    System.setProperty(srcKey, decrypted);
                }
            }
        });
    }
    
    private String decrypt(String encrypted) {
        if (encrypted != null && encrypted.startsWith(PREFIX) && encrypted.endsWith(SUFFIX)) {
            String encoded = encrypted.substring(PREFIX.length(), encrypted.length() - SUFFIX.length());
            return new String(Base64.getDecoder().decode(encoded));
        }
        return encrypted;
    }
}




import java.util.Base64;
import java.util.Scanner;

public class PropertyEncryptor {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.println("Enter the value to encrypt:");
        String original = scanner.nextLine();
        
        String encrypted = "DEC(" + Base64.getEncoder().encodeToString(original.getBytes()) + ")";
        
        System.out.println("\nEncrypted value:");
        System.out.println(encrypted);
        System.out.println("\nCopy this to your application.properties file");
    }
}


# Database Configuration
spring.datasource.password=DEC(dGVzdEAxMjM=)  # test@123

# JWT Configuration
jwt.secret=DEC(dWlrc2gmZGhfd2hLODNIbF9kSGRuc2xoX3VkaGZfd2Vpdw==)

# Service Accounts
kms.service.password=DEC(a21zX3NlcnZpY2VfcGFzc3dvcmQ=)  # kms_service_password
ob.service.password=DEC(YWRtaW4xMjM=)  # admin123

# Bank Certificates
bank.certificates.private-cert-password=DEC(ZWxpcHNpc0AxMjM=)  # elipsis@123
bank.api.session-key=DEC(VGdFWDdzNFZ0bHRzZE9qTFN2R2c5K1dKT3lSKzJSbENmVythNnY0NkZqUT0=)
bank.api.client-secret=DEC(YzUzY2U2MzE5ZjZhZGMwYmY1ZGNkYmQzMWViYjVkZjE=)



# Database Configuration
spring.datasource.url=ENC(XF5aQhBQWF5bE1VYWRJWW1sTU1tZE1RbWRJXQ==)
spring.datasource.username=ENC(XF5aQhBQWA==)
spring.datasource.password=ENC(XF5aQhBQWF5bE1VYWRJWW1sTU1tZE1RbWRJ)
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JWT Configuration
jwt.secret=ENC(XF5aQhBQWF5bE1VYWRJWW1sTU1tZE1RbWRJXQ==)
jwt.expiration=32400000
jwt.refresh-threshold=30600000

# Service Accounts
kms.service.username=ENC(XF5aQhBQWF5bE1VYWRJWW1sTU1tZE1RbWRJ)
kms.service.password=ENC(XF5aQhBQWF5bE1VYWRJWW1sTU1tZE1RbWRJ)
ob.service.username=ENC(XF5aQhBQWF5bE1VYWRJWW1sTU1tZE1RbWRJ)
ob.service.password=ENC(XF5aQhBQWF5bE1VYWRJWW1sTU1tZE1RbWRJ)

# Bank API Configuration
bank.api.base-url=ENC(XF5aQhBQWF5bE1VYWRJWW1sTU1tZE1RbWRJ)
bank.certificates.private-cert-password=ENC(XF5aQhBQWF5bE1VYWRJWW1sTU1tZE1RbWRJ)
bank.api.session-key=ENC(XF5aQhBQWF5bE1VYWRJWW1sTU1tZE1RbWRJ)
bank.api.client-id=ENC(XF5aQhBQWF5bE1VYWRJWW1sTU1tZE1RbWRJ)
bank.api.client-secret=ENC(XF5aQhBQWF5bE1VYWRJWW1sTU1tZE1RbWRJ)

# [Rest of your normal properties...]



import java.util.Base64;
import java.util.Scanner;

public class PropertyEncryptor {
    private static final byte[] XOR_KEY = "MyAppXORKey!123".getBytes();
    
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Property Encryption Utility");
        System.out.println("--------------------------");
        
        while (true) {
            System.out.println("\nEnter property key (or 'quit' to exit):");
            String key = scanner.nextLine();
            if ("quit".equalsIgnoreCase(key)) break;
            
            System.out.println("Enter value to encrypt:");
            String value = scanner.nextLine();
            
            String encrypted = encrypt(value);
            System.out.println("\nEncrypted property:");
            System.out.println(key + "=ENC(" + encrypted + ")");
            System.out.println("\nCopy this to your application.properties");
        }
    }
    
    private static String encrypt(String value) {
        byte[] bytes = value.getBytes();
        // XOR encryption
        for (int i = 0; i < bytes.length; i++) {
            bytes[i] ^= XOR_KEY[i % XOR_KEY.length];
        }
        return Base64.getEncoder().encodeToString(bytes);
    }
}


import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;
import javax.annotation.PostConstruct;
import java.util.Base64;
import java.util.HashSet;
import java.util.Set;

@Configuration
public class PropertyDecryptor {
    
    private final Environment env;
    private static final String PREFIX = "ENC(";
    private static final String SUFFIX = ")";
    private static final byte[] XOR_KEY = "MyAppXORKey!123".getBytes();
    
    // List of all property keys that should be decrypted
    private static final Set<String> ENCRYPTED_KEYS = new HashSet<>() {{
        // Database
        add("spring.datasource.password");
        add("spring.datasource.username");
        add("spring.datasource.url");
        
        // JWT
        add("jwt.secret");
        
        // Service Accounts
        add("kms.service.username");
        add("kms.service.password");
        add("ob.service.username"); 
        add("ob.service.password");
        
        // Bank API
        add("bank.certificates.private-cert-password");
        add("bank.api.session-key");
        add("bank.api.client-id");
        add("bank.api.client-secret");
        add("bank.api.base-url");
    }};
    
    public PropertyDecryptor(Environment env) {
        this.env = env;
    }
    
    @PostConstruct
    public void decryptProperties() {
        ENCRYPTED_KEYS.forEach(key -> {
            String value = env.getProperty(key);
            if (value != null && value.startsWith(PREFIX) && value.endsWith(SUFFIX)) {
                String encrypted = value.substring(PREFIX.length(), value.length() - SUFFIX.length());
                System.setProperty(key, decrypt(encrypted));
            }
        });
    }
    
    private String decrypt(String encrypted) {
        byte[] bytes = Base64.getDecoder().decode(encrypted);
        // XOR decryption
        for (int i = 0; i < bytes.length; i++) {
            bytes[i] ^= XOR_KEY[i % XOR_KEY.length];
        }
        return new String(bytes);
    }
}


package com.indianBank.config;

import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.DependsOn;
import org.springframework.context.annotation.Primary;

import javax.sql.DataSource;
import java.util.Base64;

@Configuration
public class DataSourceConfig {

    @Value("${spring.datasource.url}")
    private String url;

    @Value("${spring.datasource.username}")
    private String username;

    @Value("${spring.datasource.password}")
    private String password;

    @Value("${spring.datasource.driver-class-name}")
    private String driverClassName;

    @Value("${jwt.secret}")
    private String jwtSecret;

    @Bean
    @Primary
    @DependsOn("propertyDecryptor")
    public DataSource dataSource() {
        System.out.println("=== DataSourceConfig: Creating DataSource ===");
        
        // Decrypt all properties if they're encrypted
        String decryptedUrl = decryptPassword(url);
        String decryptedUsername = decryptPassword(username);
        String decryptedPassword = decryptPassword(password);
        
        System.out.println("DataSourceConfig: Using URL: " + decryptedUrl);
        System.out.println("DataSourceConfig: Using Username: " + decryptedUsername);
        System.out.println("DataSourceConfig: Password decrypted: " + (decryptedPassword != null && !decryptedPassword.equals(password)));
        
        HikariConfig config = new HikariConfig();
        config.setJdbcUrl(decryptedUrl);
        config.setUsername(decryptedUsername);
        config.setPassword(decryptedPassword);
        config.setDriverClassName(driverClassName);
        
        // Connection pool settings
        config.setConnectionTimeout(20000);
        config.setMaximumPoolSize(10);
        config.setMinimumIdle(5);
        config.setIdleTimeout(300000);
        config.setMaxLifetime(1200000);
        config.setLeakDetectionThreshold(60000);
        
        // Connection validation
        config.setConnectionTestQuery("SELECT 1");
        config.setValidationTimeout(3000);
        
        System.out.println("=== DataSourceConfig: DataSource created successfully ===");
        return new HikariDataSource(config);
    }
    
    private String decryptPassword(String encrypted) {
        if (encrypted != null && encrypted.startsWith("DEC(") && encrypted.endsWith(")")) {
            String encoded = encrypted.substring(4, encrypted.length() - 1);
            return new String(Base64.getDecoder().decode(encoded));
        }
        return encrypted;
    }
}

