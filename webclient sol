package com.demsIB.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.reactive.function.client.WebClient;

@Configuration
public class AppConfig {

    @Bean
    public WebClient webClient() {
        return WebClient.builder()
                .baseUrl("https://localhost:9090/kms/api/v1")
                .build();
    }
}

package com.demsIB.service.impl;

import com.demsIB.service.ScriptSearchService;
import jakarta.annotation.PostConstruct;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import java.util.Base64;
import java.util.HashMap;
import java.util.Map;

@Service
public class ScriptSearchServiceImpl implements ScriptSearchService {

    private final WebClient webClient;
    private static final Logger logger = LoggerFactory.getLogger(ScriptSearchServiceImpl.class);
    private static final byte[] XOR_KEY = "MyAppXORKey!123".getBytes();

    @Value("${kms.service.username}")
    private String kmsServiceUsername;

    @Value("${kms.service.password}")
    private String kmsServicePassword;

    private String serviceToken = null;
    private long tokenExpiryTime = 0;
    private String decryptedKmsUsername;
    private String decryptedKmsPassword;

    public ScriptSearchServiceImpl(WebClient webClient) {
        this.webClient = webClient;
    }

    @PostConstruct
    public void init() {
        this.decryptedKmsUsername = getDecryptedUsername();
        this.decryptedKmsPassword = getDecryptedKmsPassword();
        logger.debug("KMS credentials initialized and decrypted");
    }

    private String getDecryptedKmsPassword() {
        if (kmsServicePassword != null && kmsServicePassword.startsWith("ENC(") && kmsServicePassword.endsWith(")")) {
            String encrypted = kmsServicePassword.substring(4, kmsServicePassword.length() - 1);
            return decrypt(encrypted);
        }
        return kmsServicePassword;
    }

    private String getDecryptedUsername() {
        if (kmsServiceUsername != null && kmsServiceUsername.startsWith("ENC(") && kmsServiceUsername.endsWith(")")) {
            String encrypted = kmsServiceUsername.substring(4, kmsServiceUsername.length() - 1);
            return decrypt(encrypted);
        }
        return kmsServiceUsername;
    }

    private String decrypt(String encrypted) {
        byte[] bytes = Base64.getDecoder().decode(encrypted);
        for (int i = 0; i < bytes.length; i++) {
            bytes[i] ^= XOR_KEY[i % XOR_KEY.length];
        }
        return new String(bytes);
    }

    private Mono<String> getServiceToken() {
        long currentTime = System.currentTimeMillis();

        if (serviceToken == null || currentTime > tokenExpiryTime - 300000) {
            logger.debug("Service token null or expiring soon, requesting new token");

            Map<String, String> loginRequest = new HashMap<>();
            loginRequest.put("loginId", decryptedKmsUsername);
            loginRequest.put("password", decryptedKmsPassword);

            return webClient.post()
                    .uri("/auth/login")
                    .contentType(MediaType.APPLICATION_JSON)
                    .bodyValue(loginRequest)
                    .retrieve()
                    .bodyToMono(Map.class)
                    .map(response -> {
                        serviceToken = (String) response.get("token");
                        tokenExpiryTime = System.currentTimeMillis() + 32400000;
                        logger.debug("Service token refreshed, valid until: {}", new java.util.Date(tokenExpiryTime));
                        return serviceToken;
                    })
                    .onErrorResume(e -> {
                        logger.error("Failed to obtain KMS service token: {}", e.getMessage(), e);
                        return Mono.error(new RuntimeException("Failed to obtain KMS service token: " + e.getMessage(), e));
                    });
        }
        return Mono.just(serviceToken);
    }

    @Override
    public Mono<ResponseEntity<?>> searchByScriptNumber(String scriptNumber, String userToken, int page, int size) {
        Map<String, String> requestBody = new HashMap<>();
        requestBody.put("scriptNumber", scriptNumber);

        return getServiceToken()
                .flatMap(token -> webClient.post()
                        .uri(uriBuilder -> uriBuilder.path("/scripts/search-script-number")
                                .queryParam("page", page)
                                .queryParam("size", size)
                                .build())
                        .contentType(MediaType.APPLICATION_JSON)
                        .header(HttpHeaders.AUTHORIZATION, "Bearer " + token)
                        .bodyValue(requestBody)
                        .retrieve()
                        .toEntity(Object.class)
                        .onErrorResume(e -> Mono.just(
                                ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                                        .body("Error calling KMS search service: " + e.getMessage())
                        ));
    }

    @Override
    public Mono<ResponseEntity<?>> searchByContent(String searchText, String userToken, int page, int size) {
        Map<String, String> requestBody = new HashMap<>();
        requestBody.put("searchText", searchText);

        return getServiceToken()
                .flatMap(token -> webClient.post()
                        .uri(uriBuilder -> uriBuilder.path("/scripts/search-content")
                                .queryParam("page", page)
                                .queryParam("size", size)
                                .build())
                        .contentType(MediaType.APPLICATION_JSON)
                        .header(HttpHeaders.AUTHORIZATION, "Bearer " + token)
                        .bodyValue(requestBody)
                        .retrieve()
                        .toEntity(Object.class)
                        .onErrorResume(e -> Mono.just(
                                ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                                        .body("Error calling KMS search service: " + e.getMessage())
                        ));
    }

    @Override
    public Mono<ResponseEntity<?>> searchByKeyword(String searchText, String userToken, int page, int size) {
        Map<String, String> requestBody = new HashMap<>();
        requestBody.put("searchText", searchText);

        return getServiceToken()
                .flatMap(token -> webClient.post()
                        .uri(uriBuilder -> uriBuilder.path("/scripts/search-keyword")
                                .queryParam("page", page)
                                .queryParam("size", size)
                                .build())
                        .contentType(MediaType.APPLICATION_JSON)
                        .header(HttpHeaders.AUTHORIZATION, "Bearer " + token)
                        .bodyValue(requestBody)
                        .retrieve()
                        .toEntity(Object.class)
                        .onErrorResume(e -> Mono.just(
                                ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                                        .body("Error calling KMS search service: " + e.getMessage())
                        )));
    }

    @Override
    public Mono<ResponseEntity<?>> searchByFaq(String searchText, String userToken, int page, int size) {
        Map<String, String> requestBody = new HashMap<>();
        requestBody.put("searchText", searchText);

        return getServiceToken()
                .flatMap(token -> webClient.post()
                        .uri(uriBuilder -> uriBuilder.path("/scripts/search-faq")
                                .queryParam("page", page)
                                .queryParam("size", size)
                                .build())
                        .contentType(MediaType.APPLICATION_JSON)
                        .header(HttpHeaders.AUTHORIZATION, "Bearer " + token)
                        .bodyValue(requestBody)
                        .retrieve()
                        .toEntity(Object.class)
                        .onErrorResume(e -> Mono.just(
                                ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                                        .body("Error calling KMS search service: " + e.getMessage())
                        ));
    }

    @Override
    public Mono<ResponseEntity<?>> searchByGlossary(String searchText, String userToken, int page, int size) {
        Map<String, String> requestBody = new HashMap<>();
        requestBody.put("searchText", searchText);

        return getServiceToken()
                .flatMap(token -> webClient.post()
                        .uri(uriBuilder -> uriBuilder.path("/scripts/search-glossary")
                                .queryParam("page", page)
                                .queryParam("size", size)
                                .build())
                        .contentType(MediaType.APPLICATION_JSON)
                        .header(HttpHeaders.AUTHORIZATION, "Bearer " + token)
                        .bodyValue(requestBody)
                        .retrieve()
                        .toEntity(Object.class)
                        .onErrorResume(e -> Mono.just(
                                ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                                        .body("Error calling KMS search service: " + e.getMessage())
                        ));
    }

    @Override
    public Mono<ResponseEntity<byte[]>> getScriptPdf(Integer scriptId, String userToken) {
        return getServiceToken()
                .flatMap(token -> webClient.get()
                        .uri("/scripts/pdf/{scriptId}", scriptId)
                        .header(HttpHeaders.AUTHORIZATION, "Bearer " + token)
                        .header("X-Source-Application", "DEMS-IB")
                        .retrieve()
                        .toEntity(byte[].class)
                        .map(response -> {
                            HttpHeaders responseHeaders = new HttpHeaders();
                            responseHeaders.setContentType(MediaType.APPLICATION_PDF);
                            responseHeaders.setContentDispositionFormData("filename", "script-" + scriptId + ".pdf");
                            responseHeaders.setContentLength(response.getBody() != null ? response.getBody().length : 0);
                            return new ResponseEntity<>(response.getBody(), responseHeaders, response.getStatusCode());
                        })
                        .onErrorResume(e -> Mono.error(new RuntimeException("Error fetching PDF from KMS: " + e.getMessage(), e)));
    }

    @Override
    public Mono<ResponseEntity<?>> getWhatsNewScripts(String userToken, int page, int size) {
        return getServiceToken()
                .flatMap(token -> webClient.get()
                        .uri(uriBuilder -> uriBuilder.path("/scripts/whats-new-script")
                                .queryParam("page", page)
                                .queryParam("size", size)
                                .build())
                        .header(HttpHeaders.AUTHORIZATION, "Bearer " + token)
                        .retrieve()
                        .toEntity(Object.class)
                        .onErrorResume(e -> Mono.just(
                                ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                                        .body("Error fetching What's New scripts from KMS: " + e.getMessage())
                        ));
    }

    @Override
    public Mono<ResponseEntity<?>> getFrequentlyAccessedScripts(String userToken, int limit, int hours) {
        return getServiceToken()
                .flatMap(token -> webClient.get()
                        .uri(uriBuilder -> uriBuilder.path("/scripts/frequently-accessed")
                                .queryParam("limit", limit)
                                .queryParam("hours", hours)
                                .build())
                        .header(HttpHeaders.AUTHORIZATION, "Bearer " + token)
                        .header("X-Source-Application", "DEMS-IB")
                        .retrieve()
                        .toEntity(Object.class)
                        .onErrorResume(e -> Mono.just(
                                ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                                        .body("Error fetching frequently accessed scripts from KMS: " + e.getMessage())
                        ));
    }

    @Override
    public Mono<ResponseEntity<?>> getQuickAccessScripts(String userToken) {
        return getServiceToken()
                .flatMap(token -> webClient.get()
                        .uri("/scripts/quick-access")
                        .header(HttpHeaders.AUTHORIZATION, "Bearer " + token)
                        .header("X-Source-Application", "DEMS-IB")
                        .retrieve()
                        .toEntity(Object.class)
                        .onErrorResume(e -> Mono.just(
                                ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                                        .body("Error fetching quick access scripts from KMS: " + e.getMessage())
                        ));
    }
}



WebClient.builder()
    .baseUrl("https://localhost:9090/kms/api/v1")
    .clientConnector(new ReactorClientHttpConnector(
        HttpClient.create()
            .responseTimeout(Duration.ofSeconds(10))
    )
    .build();



.retrieve()
.toEntity(Object.class)
.retryWhen(Retry.backoff(3, Duration.ofSeconds(1)))
