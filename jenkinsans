stage('Create Backup'){
    steps{
        script{
            echo "=== Creating Application Backup ==="

            // Generate timestamp for backup
            def timestamp = bat(script: '@powershell -Command "(Get-Date).ToString(\'yyyyMMdd_HHmmss\')"', returnStdout: true).trim()
            env.BACKUP_TIMESTAMP = timestamp
            env.BACKUP_FILE = "${BACKUP_DIR}\\${APP_NAME}.war.backup.${timestamp}"

            // Create backup with proper escaping
            bat """
                @echo off
                set TIMESTAMP=${timestamp}
                set BACKUP_FILE=${env.BACKUP_FILE}
                
                echo Backup timestamp: %TIMESTAMP%
                echo Backup location: %BACKUP_FILE%

                if exist "${TOMCAT_WEBAPPS}\\${APP_NAME}.war" (
                    echo Creating backup of existing WAR file...
                    copy "${TOMCAT_WEBAPPS}\\${APP_NAME}.war" "%BACKUP_FILE%"
                    echo Backup created successfully: %BACKUP_FILE%

                    if exist "${TOMCAT_WEBAPPS}\\${APP_NAME}" (
                        echo Creating backup of application directory...
                        xcopy "${TOMCAT_WEBAPPS}\\${APP_NAME}" "${BACKUP_DIR}\\${APP_NAME}_%TIMESTAMP%" /E /I /H /Y
                        echo Application directory backed up
                    )
                ) else (
                    echo No existing WAR file found - fresh deployment
                    echo FRESH_DEPLOYMENT > "${BACKUP_DIR}\\deployment_type_%TIMESTAMP%.txt"
                )

                echo Cleaning old backups (keeping last 5)...
                for /f "skip=5 delims=" %%i in ('dir /b /o-d "${BACKUP_DIR}\\${APP_NAME}.war.backup.*" 2^>nul') do (
                    del "${BACKUP_DIR}\\%%i"
                    echo Removed old backup: %%i
                )
            """
        }
    }
}

















pipeline {
    agent any
    environment {
        BACKUP_DIR = 'C:\\Jenkins\\Backups\\StudentApp'
        TOMCAT_WEBAPPS = 'C:\\Program Files\\Apache Software Foundation\\Tomcat 10.1\\webapps'
        TOMCAT_SERVICE = 'Tomcat10'
        APP_NAME = 'student'
    }

    stages {
        // Your existing stages (Build, Pre-Deployment Checks, Create Backup)

        stage('Stop Tomcat') {
            steps {
                script {
                    echo "=== Stopping Tomcat Service ==="
                    
                    withCredentials([usernamePassword(
                        credentialsId: 'tomcat-admin-creds',
                        usernameVariable: 'ADMIN_USER',
                        passwordVariable: 'ADMIN_PASS'
                    )]) {
                        // Method 1: Using PowerShell with credentials
                        bat """
                            powershell -Command "\$securePass = ConvertTo-SecureString '${ADMIN_PASS}' -AsPlainText -Force; \
                            \$credential = New-Object System.Management.Automation.PSCredential('${ADMIN_USER}', \$securePass); \
                            Start-Process -FilePath 'cmd.exe' -ArgumentList '/c','net stop ${TOMCAT_SERVICE}' -Credential \$credential -NoNewWindow -Wait"
                        """
                        
                        // Verify service stopped
                        def status = bat(script: "sc query ${TOMCAT_SERVICE} | findstr STATE", returnStdout: true).trim()
                        if(status.contains("STOPPED")) {
                            echo "✅ Tomcat service confirmed stopped"
                        } else {
                            error("❌ Failed to stop Tomcat service")
                        }
                    }
                }
            }
        }

        // Your existing Deploy Application stage

        stage('Start Tomcat') {
            steps {
                script {
                    echo "=== Starting Tomcat Service ==="
                    
                    withCredentials([usernamePassword(
                        credentialsId: 'tomcat-admin-creds',
                        usernameVariable: 'ADMIN_USER',
                        passwordVariable: 'ADMIN_PASS'
                    )]) {
                        bat """
                            powershell -Command "\$securePass = ConvertTo-SecureString '${ADMIN_PASS}' -AsPlainText -Force; \
                            \$credential = New-Object System.Management.Automation.PSCredential('${ADMIN_USER}', \$securePass); \
                            Start-Process -FilePath 'cmd.exe' -ArgumentList '/c','net start ${TOMCAT_SERVICE}' -Credential \$credential -NoNewWindow -Wait"
                        """
                        
                        // Verify service started
                        def status = bat(script: "sc query ${TOMCAT_SERVICE} | findstr STATE", returnStdout: true).trim()
                        if(status.contains("RUNNING")) {
                            echo "✅ Tomcat service confirmed running"
                        } else {
                            error("❌ Failed to start Tomcat service")
                        }
                    }
                }
            }
        }

        // Your remaining stages
    }
}



















pipeline {
    agent any
    environment {
        BACKUP_DIR = 'C:\\Jenkins\\Backups\\StudentApp'
        TOMCAT_WEBAPPS = 'C:\\Program Files\\Apache Software Foundation\\Tomcat 10.1\\webapps'
        TOMCAT_SERVICE = 'Tomcat10'
        APP_NAME = 'student'
        TOMCAT_STOP_METHOD = 'not_needed' // Default value
    }

    stages {
        stage('Build') {
            steps {
                script {
                    echo "=== Starting Maven Build ==="
                    
                    // Test Maven Central connectivity with timeout
                    def httpCode = bat(
                        script: 'curl -s -o nul -w "%{http_code}" --connect-timeout 10 https://repo.maven.apache.org/maven2/',
                        returnStdout: true
                    ).trim()
                    
                    if(httpCode == "200") {
                        echo "Maven Central accessible (HTTP ${httpCode}) - proceeding with build"
                        bat 'mvn clean package -DskipTests=true'
                    } else {
                        echo "Maven Central connection issue (HTTP ${httpCode}) - trying offline build"
                        bat 'mvn clean package -DskipTests=true -o'
                    }
                }
            }
            post {
                success {
                    archiveArtifacts artifacts: '**/target/*.war', fingerprint: true
                }
            }
        }

        stage('Pre-Deployment Checks') {
            steps {
                script {
                    echo "=== Pre-Deployment Checks ==="
                    
                    // Create backup directory with error handling
                    bat """
                        if not exist "${BACKUP_DIR}" (
                            mkdir "${BACKUP_DIR}" || exit /b 1
                            echo ✅ Created backup directory
                        )
                    """
                    
                    // Verify Tomcat directory access
                    bat """
                        if not exist "${TOMCAT_WEBAPPS}" (
                            echo ❌ Tomcat webapps directory not accessible
                            exit 1
                        )
                    """
                    
                    // Check Tomcat service status
                    def serviceStatus = bat(
                        script: "sc query ${TOMCAT_SERVICE} | findstr STATE",
                        returnStdout: true
                    ).trim()
                    
                    if(serviceStatus.contains("RUNNING")) {
                        env.TOMCAT_RUNNING = 'true'
                        echo "⚠️ Tomcat running - will attempt to stop"
                    } else {
                        env.TOMCAT_RUNNING = 'false'
                        echo "✅ Tomcat already stopped"
                    }
                }
            }
        }

        stage('Create Backup') {
            steps {
                script {
                    echo "=== Creating Application Backup ==="
                    
                    def timestamp = bat(
                        script: '@powershell -Command "(Get-Date).ToString(\'yyyyMMdd_HHmmss\')"',
                        returnStdout: true
                    ).trim()
                    
                    env.BACKUP_FILE = "${BACKUP_DIR}\\${APP_NAME}.war.backup.${timestamp}"
                    
                    bat """
                        @echo off
                        setlocal enabledelayedexpansion
                        
                        if exist "${TOMCAT_WEBAPPS}\\${APP_NAME}.war" (
                            echo Creating backup of WAR file...
                            copy "${TOMCAT_WEBAPPS}\\${APP_NAME}.war" "${env.BACKUP_FILE}" || exit /b 1
                            
                            if exist "${TOMCAT_WEBAPPS}\\${APP_NAME}" (
                                echo Backing up application directory...
                                robocopy "${TOMCAT_WEBAPPS}\\${APP_NAME}" "${BACKUP_DIR}\\${APP_NAME}_${timestamp}" /MIR /NP /NFL /NDL
                            )
                        ) else (
                            echo Fresh deployment detected
                            echo FRESH_DEPLOYMENT > "${BACKUP_DIR}\\deployment_type_${timestamp}.txt"
                        )
                        
                        echo Cleaning old backups...
                        for /f "skip=5 delims=" %%i in ('dir /b /o-d "${BACKUP_DIR}\\${APP_NAME}.war.backup.*" 2^>nul') do (
                            del "${BACKUP_DIR}\\%%i"
                        )
                    """
                }
            }
        }

        stage('Stop Tomcat') {
            when {
                expression { env.TOMCAT_RUNNING == 'true' }
            }
            steps {
                script {
                    echo "=== Stopping Tomcat ==="
                    
                    withCredentials([usernamePassword(
                        credentialsId: 'tomcat-admin-creds',
                        usernameVariable: 'ADMIN_USER',
                        passwordVariable: 'ADMIN_PASS'
                    )]) {
                        def stopStatus = bat(
                            script: """
                                powershell -Command "\$secpass = ConvertTo-SecureString '${ADMIN_PASS}' -AsPlainText -Force;
                                \$cred = New-Object System.Management.Automation.PSCredential('${ADMIN_USER}', \$secpass);
                                Start-Process cmd -Credential \$cred -ArgumentList '/c','net stop ${TOMCAT_SERVICE}' -Wait -NoNewWindow"
                            """,
                            returnStatus: true
                        )
                        
                        if(stopStatus == 0) {
                            env.TOMCAT_STOP_METHOD = 'service_stop'
                            echo "✅ Tomcat stopped successfully"
                        } else {
                            error("❌ Failed to stop Tomcat")
                        }
                    }
                }
            }
        }

        stage('Deploy Application') {
            steps {
                script {
                    echo "=== Deploying Application ==="
                    
                    bat """
                        @echo off
                        setlocal
                        
                        echo Removing old deployment...
                        if exist "${TOMCAT_WEBAPPS}\\${APP_NAME}.war" del /q "${TOMCAT_WEBAPPS}\\${APP_NAME}.war"
                        if exist "${TOMCAT_WEBAPPS}\\${APP_NAME}" rmdir /s /q "${TOMCAT_WEBAPPS}\\${APP_NAME}"
                        
                        echo Deploying new WAR...
                        copy /y "target\\*.war" "${TOMCAT_WEBAPPS}\\${APP_NAME}.war" || exit /b 1
                        
                        echo Setting permissions...
                        icacls "${TOMCAT_WEBAPPS}\\${APP_NAME}.war" /grant "Everyone:(F)" >nul 2>&1
                    """
                }
            }
        }

        stage('Start Tomcat') {
            when {
                expression { env.TOMCAT_RUNNING == 'true' }
            }
            steps {
                script {
                    echo "=== Starting Tomcat ==="
                    
                    withCredentials([usernamePassword(
                        credentialsId: 'tomcat-admin-creds',
                        usernameVariable: 'ADMIN_USER',
                        passwordVariable: 'ADMIN_PASS'
                    )]) {
                        def startStatus = bat(
                            script: """
                                powershell -Command "\$secpass = ConvertTo-SecureString '${ADMIN_PASS}' -AsPlainText -Force;
                                \$cred = New-Object System.Management.Automation.PSCredential('${ADMIN_USER}', \$secpass);
                                Start-Process cmd -Credential \$cred -ArgumentList '/c','net start ${TOMCAT_SERVICE}' -Wait -NoNewWindow"
                            """,
                            returnStatus: true
                        )
                        
                        if(startStatus == 0) {
                            env.TOMCAT_START_SUCCESS = 'true'
                            echo "✅ Tomcat started successfully"
                            
                            // Wait for deployment to complete
                            bat 'timeout /t 30 >nul'
                        } else {
                            env.TOMCAT_START_SUCCESS = 'false'
                            error("❌ Failed to start Tomcat")
                        }
                    }
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    echo "=== Verifying Deployment ==="
                    
                    // Check files were deployed
                    bat """
                        if not exist "${TOMCAT_WEBAPPS}\\${APP_NAME}.war" (
                            echo ❌ WAR file not deployed
                            exit 1
                        )
                        echo ✅ WAR file deployed
                    """
                    
                    // Test application endpoints
                    def endpoints = ["http://localhost:8080/${APP_NAME}/api/health"]
                    def healthy = false
                    
                    for(endpoint in endpoints) {
                        def status = bat(
                            script: "curl -s -o nul -w \"%{http_code}\" --connect-timeout 10 \"${endpoint}\"",
                            returnStdout: true
                        ).trim()
                        
                        if(status == "200") {
                            healthy = true
                            echo "✅ Endpoint ${endpoint} is healthy (HTTP 200)"
                            break
                        }
                    }
                    
                    if(!healthy) {
                        echo "⚠️ No healthy endpoints found - application may still be starting"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
    }

    post {
        always {
            echo "=== Cleaning Workspace ==="
            deleteDir()
            
            // Final status report
            echo """
            === Deployment Summary ===
            Backup Location: ${env.BACKUP_FILE ?: 'N/A'}
            Tomcat Status: ${env.TOMCAT_RUNNING == 'true' ? 'Was running' : 'Was stopped'}
            Stop Method: ${env.TOMCAT_STOP_METHOD}
            Start Success: ${env.TOMCAT_START_SUCCESS ?: 'N/A'}
            """
        }
        success {
            echo "🎉 Deployment completed successfully!"
        }
        unstable {
            echo "⚠️ Deployment completed with warnings"
        }
        failure {
            echo """
            ❌ Deployment failed
            Rollback Options:
            1. Restore backup: copy "${env.BACKUP_FILE}" "${TOMCAT_WEBAPPS}\\${APP_NAME}.war"
            2. Check Tomcat logs: type "%CATALINA_HOME%\\logs\\catalina.out"
            """
        }
    }
}








pipeline {
    agent any
    environment {
        BACKUP_DIR = 'C:\\Jenkins\\Backups\\StudentApp'
        TOMCAT_WEBAPPS = 'C:\\Program Files\\Apache Software Foundation\\Tomcat 10.1\\webapps'
        TOMCAT_SERVICE = 'Tomcat10'
        APP_NAME = 'student'
        MAVEN_REPO_URL = 'repo.maven.apache.org'
    }

    stages {
        stage('Verify DNS Resolution') {
            steps {
                script {
                    echo "=== Verifying DNS Resolution for Maven Central ==="
                    
                    // First verify basic DNS resolution
                    def dnsCheck = bat(
                        script: "nslookup ${MAVEN_REPO_URL}",
                        returnStatus: true
                    )
                    
                    if (dnsCheck != 0) {
                        error "DNS resolution failed for ${MAVEN_REPO_URL}"
                    }
                    
                    echo "✅ DNS resolution verified for ${MAVEN_REPO_URL}"
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    echo "=== Starting Maven Build ==="
                    
                    // Test connectivity with timeout and proper URL
                    def httpCode = bat(
                        script: """
                            curl -s -o nul -w "%{http_code}" --connect-timeout 10 \
                            "https://${MAVEN_REPO_URL}/maven2/"
                        """,
                        returnStdout: true
                    ).trim()
                    
                    echo "Maven Central connectivity check returned HTTP ${httpCode}"
                    
                    try {
                        if (httpCode == "200") {
                            echo "Maven Central accessible - proceeding with online build"
                            bat 'mvn clean package -DskipTests=true'
                        } else {
                            echo "HTTP ${httpCode} received - falling back to offline build"
                            bat 'mvn clean package -DskipTests=true -o'
                        }
                    } catch (Exception e) {
                        echo "Build failed with exception: ${e.getMessage()}"
                        echo "Attempting with local repository only"
                        bat 'mvn clean package -DskipTests=true -o -Dmaven.repo.local=repository'
                    }
                }
            }
            post {
                success {
                    archiveArtifacts artifacts: '**/target/*.war', fingerprint: true
                    echo "Build artifacts archived successfully"
                }
                failure {
                    echo "Build failed - check Maven configuration and network connectivity"
                    echo "Verify hosts file contains correct entry for ${MAVEN_REPO_URL}"
                }
            }
        }

        stage('Pre-Deployment Checks') {
            steps {
                script {
                    echo "=== Pre-Deployment Checks ==="
                    
                    // Create backup directory
                    bat """
                        if not exist "${BACKUP_DIR}" (
                            mkdir "${BACKUP_DIR}" || exit /b 1
                            echo ✅ Created backup directory
                        )
                    """
                    
                    // Verify Tomcat directory access
                    bat """
                        if not exist "${TOMCAT_WEBAPPS}" (
                            echo ❌ Tomcat webapps directory not accessible
                            exit 1
                        )
                    """
                    
                    // Check Tomcat service status
                    def serviceStatus = bat(
                        script: "sc query ${TOMCAT_SERVICE} | findstr STATE",
                        returnStdout: true
                    ).trim()
                    
                    if (serviceStatus.contains("RUNNING")) {
                        env.TOMCAT_RUNNING = 'true'
                        echo "⚠️ Tomcat running - will attempt to stop"
                    } else {
                        env.TOMCAT_RUNNING = 'false'
                        echo "✅ Tomcat already stopped"
                    }
                }
            }
        }

        stage('Create Backup') {
            steps {
                script {
                    echo "=== Creating Application Backup ==="
                    
                    def timestamp = bat(
                        script: '@powershell -Command "(Get-Date).ToString(\'yyyyMMdd_HHmmss\')"',
                        returnStdout: true
                    ).trim()
                    
                    env.BACKUP_FILE = "${BACKUP_DIR}\\${APP_NAME}.war.backup.${timestamp}"
                    
                    bat """
                        @echo off
                        setlocal enabledelayedexpansion
                        
                        if exist "${TOMCAT_WEBAPPS}\\${APP_NAME}.war" (
                            echo Creating backup of WAR file...
                            copy "${TOMCAT_WEBAPPS}\\${APP_NAME}.war" "${env.BACKUP_FILE}" || exit /b 1
                            
                            if exist "${TOMCAT_WEBAPPS}\\${APP_NAME}" (
                                echo Backing up application directory...
                                robocopy "${TOMCAT_WEBAPPS}\\${APP_NAME}" "${BACKUP_DIR}\\${APP_NAME}_${timestamp}" /MIR /NP /NFL /NDL
                            )
                        ) else (
                            echo Fresh deployment detected
                            echo FRESH_DEPLOYMENT > "${BACKUP_DIR}\\deployment_type_${timestamp}.txt"
                        )
                    """
                }
            }
        }

        stage('Deploy Application') {
            steps {
                script {
                    echo "=== Deploying Application ==="
                    
                    bat """
                        @echo off
                        setlocal
                        
                        echo Removing old deployment...
                        if exist "${TOMCAT_WEBAPPS}\\${APP_NAME}.war" del /q "${TOMCAT_WEBAPPS}\\${APP_NAME}.war"
                        if exist "${TOMCAT_WEBAPPS}\\${APP_NAME}" rmdir /s /q "${TOMCAT_WEBAPPS}\\${APP_NAME}"
                        
                        echo Deploying new WAR...
                        copy /y "target\\*.war" "${TOMCAT_WEBAPPS}\\${APP_NAME}.war" || exit /b 1
                        
                        echo Setting permissions...
                        icacls "${TOMCAT_WEBAPPS}\\${APP_NAME}.war" /grant "Everyone:(F)" >nul 2>&1
                    """
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    echo "=== Verifying Deployment ==="
                    
                    // Check files were deployed
                    bat """
                        if not exist "${TOMCAT_WEBAPPS}\\${APP_NAME}.war" (
                            echo ❌ WAR file not deployed
                            exit 1
                        )
                        echo ✅ WAR file deployed
                    """
                    
                    // Test application health endpoint
                    def healthy = false
                    def endpoints = [
                        "http://localhost:8080/${APP_NAME}/api/health",
                        "http://localhost:8080/${APP_NAME}/health"
                    ]
                    
                    for (endpoint in endpoints) {
                        try {
                            def status = bat(
                                script: """
                                    curl -s -o nul -w "%{http_code}" --connect-timeout 10 "${endpoint}"
                                """,
                                returnStdout: true
                            ).trim()
                            
                            if (status == "200") {
                                healthy = true
                                echo "✅ Endpoint ${endpoint} is healthy (HTTP 200)"
                                break
                            }
                        } catch (Exception e) {
                            echo "⚠️ Failed to check ${endpoint}: ${e.getMessage()}"
                        }
                    }
                    
                    if (!healthy) {
                        echo "⚠️ No healthy endpoints found - application may still be starting"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
    }

    post {
        always {
            echo "=== Cleaning Workspace ==="
            deleteDir()
            
            // Final status report
            echo """
            === Deployment Summary ===
            Backup Location: ${env.BACKUP_FILE ?: 'N/A'}
            Tomcat Status: ${env.TOMCAT_RUNNING == 'true' ? 'Was running' : 'Was stopped'}
            Build Source: ${currentBuild.result == 'SUCCESS' ? 'Online' : 'Offline'}
            """
        }
        success {
            echo "🎉 Pipeline completed successfully!"
        }
        unstable {
            echo "⚠️ Pipeline completed with warnings"
            echo "Application may still be starting - check Tomcat logs if endpoints aren't responding"
        }
        failure {
            echo """
            ❌ Pipeline failed
            Troubleshooting Steps:
            1. Verify DNS resolution for ${MAVEN_REPO_URL}
            2. Check Maven build logs for errors
            3. Verify Tomcat service account has write permissions to ${TOMCAT_WEBAPPS}
            4. Check Jenkins agent connectivity
            """
        }
    }
}


















stage('Verify Connectivity') {
    steps {
        script {
            echo "=== Verifying Maven Central Connectivity ==="
            
            // 1. DNS Resolution Check
            def dnsCheck = bat(
                script: "nslookup ${MAVEN_REPO_URL}",
                returnStatus: true
            )
            
            if (dnsCheck != 0) {
                error "❌ DNS resolution failed for ${MAVEN_REPO_URL}"
            }
            echo "✅ DNS resolution verified for ${MAVEN_REPO_URL}"
            
            // 2. HTTP Connectivity Check using PowerShell
            def httpStatus = powershell(
                script: """
                    try {
                        \$response = Invoke-WebRequest -Uri "https://${MAVEN_REPO_URL}/maven2/" -Method Head -UseBasicParsing -TimeoutSec 10
                        Write-Output \$response.StatusCode
                    } catch {
                        Write-Output \$_.Exception.Response.StatusCode.Value__
                    }
                """,
                returnStdout: true
            ).trim()
            
            echo "Maven Central connectivity check returned HTTP ${httpStatus}"
            
            if (httpStatus == "200") {
                env.MAVEN_ONLINE = true
                echo "✅ Maven Central is accessible"
            } else {
                env.MAVEN_ONLINE = false
                echo "⚠️ Maven Central not accessible (HTTP ${httpStatus}) - will use offline mode"
            }
        }
    }
}
