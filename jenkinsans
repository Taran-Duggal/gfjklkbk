stage('Create Backup'){
    steps{
        script{
            echo "=== Creating Application Backup ==="

            // Generate timestamp for backup
            def timestamp = bat(script: '@powershell -Command "(Get-Date).ToString(\'yyyyMMdd_HHmmss\')"', returnStdout: true).trim()
            env.BACKUP_TIMESTAMP = timestamp
            env.BACKUP_FILE = "${BACKUP_DIR}\\${APP_NAME}.war.backup.${timestamp}"

            // Create backup with proper escaping
            bat """
                @echo off
                set TIMESTAMP=${timestamp}
                set BACKUP_FILE=${env.BACKUP_FILE}
                
                echo Backup timestamp: %TIMESTAMP%
                echo Backup location: %BACKUP_FILE%

                if exist "${TOMCAT_WEBAPPS}\\${APP_NAME}.war" (
                    echo Creating backup of existing WAR file...
                    copy "${TOMCAT_WEBAPPS}\\${APP_NAME}.war" "%BACKUP_FILE%"
                    echo Backup created successfully: %BACKUP_FILE%

                    if exist "${TOMCAT_WEBAPPS}\\${APP_NAME}" (
                        echo Creating backup of application directory...
                        xcopy "${TOMCAT_WEBAPPS}\\${APP_NAME}" "${BACKUP_DIR}\\${APP_NAME}_%TIMESTAMP%" /E /I /H /Y
                        echo Application directory backed up
                    )
                ) else (
                    echo No existing WAR file found - fresh deployment
                    echo FRESH_DEPLOYMENT > "${BACKUP_DIR}\\deployment_type_%TIMESTAMP%.txt"
                )

                echo Cleaning old backups (keeping last 5)...
                for /f "skip=5 delims=" %%i in ('dir /b /o-d "${BACKUP_DIR}\\${APP_NAME}.war.backup.*" 2^>nul') do (
                    del "${BACKUP_DIR}\\%%i"
                    echo Removed old backup: %%i
                )
            """
        }
    }
}

















pipeline {
    agent any
    environment {
        BACKUP_DIR = 'C:\\Jenkins\\Backups\\StudentApp'
        TOMCAT_WEBAPPS = 'C:\\Program Files\\Apache Software Foundation\\Tomcat 10.1\\webapps'
        TOMCAT_SERVICE = 'Tomcat10'
        APP_NAME = 'student'
    }

    stages {
        // Your existing stages (Build, Pre-Deployment Checks, Create Backup)

        stage('Stop Tomcat') {
            steps {
                script {
                    echo "=== Stopping Tomcat Service ==="
                    
                    withCredentials([usernamePassword(
                        credentialsId: 'tomcat-admin-creds',
                        usernameVariable: 'ADMIN_USER',
                        passwordVariable: 'ADMIN_PASS'
                    )]) {
                        // Method 1: Using PowerShell with credentials
                        bat """
                            powershell -Command "\$securePass = ConvertTo-SecureString '${ADMIN_PASS}' -AsPlainText -Force; \
                            \$credential = New-Object System.Management.Automation.PSCredential('${ADMIN_USER}', \$securePass); \
                            Start-Process -FilePath 'cmd.exe' -ArgumentList '/c','net stop ${TOMCAT_SERVICE}' -Credential \$credential -NoNewWindow -Wait"
                        """
                        
                        // Verify service stopped
                        def status = bat(script: "sc query ${TOMCAT_SERVICE} | findstr STATE", returnStdout: true).trim()
                        if(status.contains("STOPPED")) {
                            echo "✅ Tomcat service confirmed stopped"
                        } else {
                            error("❌ Failed to stop Tomcat service")
                        }
                    }
                }
            }
        }

        // Your existing Deploy Application stage

        stage('Start Tomcat') {
            steps {
                script {
                    echo "=== Starting Tomcat Service ==="
                    
                    withCredentials([usernamePassword(
                        credentialsId: 'tomcat-admin-creds',
                        usernameVariable: 'ADMIN_USER',
                        passwordVariable: 'ADMIN_PASS'
                    )]) {
                        bat """
                            powershell -Command "\$securePass = ConvertTo-SecureString '${ADMIN_PASS}' -AsPlainText -Force; \
                            \$credential = New-Object System.Management.Automation.PSCredential('${ADMIN_USER}', \$securePass); \
                            Start-Process -FilePath 'cmd.exe' -ArgumentList '/c','net start ${TOMCAT_SERVICE}' -Credential \$credential -NoNewWindow -Wait"
                        """
                        
                        // Verify service started
                        def status = bat(script: "sc query ${TOMCAT_SERVICE} | findstr STATE", returnStdout: true).trim()
                        if(status.contains("RUNNING")) {
                            echo "✅ Tomcat service confirmed running"
                        } else {
                            error("❌ Failed to start Tomcat service")
                        }
                    }
                }
            }
        }

        // Your remaining stages
    }
}
