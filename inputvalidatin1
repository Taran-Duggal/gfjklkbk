package com.indianBank.config;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.servlet.*;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.time.Instant;
import java.util.Iterator;
import java.util.Map;
import java.util.regex.Pattern;

@Component
public class InputValidationFilter implements Filter {

    private static final Logger logger = LoggerFactory.getLogger(InputValidationFilter.class);

    // Targeted malicious patterns with reduced false positives
    private static final Pattern[] MALICIOUS_PATTERNS = {
            // SQL Injection patterns (more specific)
            Pattern.compile("(?i)(?:union\\s+select|drop\\s+table|insert\\s+into|delete\\s+from|truncate\\s+table)"),
            Pattern.compile("(?i)(?:'\\s+(?:or|and)\\s+['\\d]\\s*=\\s*['\\d])"),
            Pattern.compile("(?i)(?:;\\s*(?:--|#|/\\*|xp_|sp_))"),
            Pattern.compile("(?i)(?:exec\\s*\\(|execute\\s*\\(|waitfor\\s+delay)"),
            
            // XSS patterns (more specific)
            Pattern.compile("(?i)(?:<script|<iframe|<object|<embed|<link|<meta|javascript:)"),
            Pattern.compile("(?i)(?:onload\\s*=|onerror\\s*=|onclick\\s*=|onmouseover\\s*=)"),
            
            // Command injection patterns
            Pattern.compile("(?:\\|\\||&&|;\\s*(?:ls|cat|rm|dir|kill|wget|curl))"),
            
            // Path traversal patterns
            Pattern.compile("(?:\\.\\./|\\.\\.\\\\)"),
            Pattern.compile("(?:/etc/passwd|/etc/shadow|/bin/sh|/bin/bash)"),
            
            // NoSQL injection patterns
            Pattern.compile("\\$where\\s*:"),
            Pattern.compile("\\{\\s*\\$.*\\}")
    };

    // Expanded safe patterns
    private static final Pattern[] SAFE_PATTERNS = {
            Pattern.compile("^[a-zA-Z0-9_]+=[a-zA-Z0-9_+-]+$"),
            Pattern.compile("^page=\\d{1,4}$"),
            Pattern.compile("^size=\\d{1,3}$"),
            Pattern.compile("^sort=[a-zA-Z0-9_,.+-]+(:(asc|desc))?$"),
            Pattern.compile("^[a-zA-Z0-9_]+Id=\\d+$"),
            Pattern.compile("^status=[a-zA-Z_-]+$"),
            Pattern.compile("^activeYn=[YNyn]$"),
            Pattern.compile("^search=[a-zA-Z0-9\\s%._-]+$"),
            Pattern.compile("^filter=[a-zA-Z0-9_=<>!&|]+$"),
            Pattern.compile("^timestamp=\\d{10,13}$")
    };

    // Content types that should skip body validation
    private static final String[] SKIP_BODY_VALIDATION_CONTENT_TYPES = {
            "multipart/form-data",
            "application/octet-stream",
            "image/",
            "video/",
            "audio/"
    };

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {

        HttpServletRequest httpRequest = (HttpServletRequest) request;
        HttpServletResponse httpResponse = (HttpServletResponse) response;

        String uri = httpRequest.getRequestURI();
        String method = httpRequest.getMethod();
        String contentType = httpRequest.getContentType();

        // Skip validation for static resources and OPTIONS requests
        if (isStaticResource(uri) || "OPTIONS".equalsIgnoreCase(method)) {
            chain.doFilter(request, response);
            return;
        }

        // Validate query parameters
        String queryString = httpRequest.getQueryString();
        if (queryString != null && !isQueryStringSafe(queryString)) {
            logger.warn("Malicious query string blocked: Method={}, URI={}", method, uri);
            blockRequest(httpResponse, "Invalid query parameters detected");
            return;
        }

        // Skip body validation for certain content types
        if (contentType != null) {
            for (String skipType : SKIP_BODY_VALIDATION_CONTENT_TYPES) {
                if (contentType.startsWith(skipType)) {
                    chain.doFilter(request, response);
                    return;
                }
            }
        }

        // Validate request body for methods that typically have body content
        if (hasRequestBody(method)) {
            CachedBodyHttpServletRequest wrappedRequest = new CachedBodyHttpServletRequest(httpRequest);
            String body = wrappedRequest.getCachedBody();

            if (body != null && !body.trim().isEmpty() && !isRequestBodySafe(body, contentType)) {
                logger.warn("Malicious request body blocked: Method={}, URI={}", method, uri);
                blockRequest(httpResponse, "Invalid request content detected");
                return;
            }

            chain.doFilter(wrappedRequest, response);
        } else {
            chain.doFilter(request, response);
        }
    }

    private boolean isStaticResource(String uri) {
        return uri.endsWith(".css") || uri.endsWith(".js") || 
               uri.endsWith(".png") || uri.endsWith(".jpg") || 
               uri.endsWith(".jpeg") || uri.endsWith(".gif") || 
               uri.endsWith(".ico") || uri.endsWith(".svg") || 
               uri.endsWith(".woff") || uri.endsWith(".woff2") || 
               uri.endsWith(".ttf") || uri.endsWith(".map") ||
               uri.contains("/static/") || uri.contains("/assets/") ||
               uri.contains("/webjars/") || uri.contains("/favicon.ico");
    }

    private boolean hasRequestBody(String method) {
        return "POST".equalsIgnoreCase(method) || 
               "PUT".equalsIgnoreCase(method) || 
               "PATCH".equalsIgnoreCase(method);
    }

    private boolean isQueryStringSafe(String queryString) {
        if (queryString == null || queryString.trim().isEmpty()) {
            return true;
        }

        // Check if entire query string matches safe patterns
        for (Pattern safePattern : SAFE_PATTERNS) {
            if (safePattern.matcher(queryString).matches()) {
                return true;
            }
        }

        // Check each parameter individually
        String[] parameters = queryString.split("&");
        for (String param : parameters) {
            if (!isParameterSafe(param)) {
                return false;
            }
        }

        return true;
    }

    private boolean isParameterSafe(String parameter) {
        if (parameter == null || parameter.trim().isEmpty()) {
            return true;
        }

        // Check against safe patterns first
        for (Pattern safePattern : SAFE_PATTERNS) {
            if (safePattern.matcher(parameter).matches()) {
                return true;
            }
        }

        // Check for key=value format
        if (!parameter.contains("=")) {
            return false;
        }

        String[] parts = parameter.split("=", 2);
        if (parts.length != 2) {
            return false;
        }

        // Check key and value separately
        String key = parts[0];
        String value = parts[1];

        // Allow common parameter keys
        if (!key.matches("^[a-zA-Z0-9_\\-]+$")) {
            return false;
        }

        // URL decode the value before checking
        try {
            value = URLDecoder.decode(value, StandardCharsets.UTF_8.name());
        } catch (Exception e) {
            return false;
        }

        // Check value against malicious patterns
        return !containsMaliciousContent(value);
    }

    private boolean isRequestBodySafe(String body, String contentType) {
        if (body == null || body.trim().isEmpty()) {
            return true;
        }

        // Skip validation for certain content types
        if (contentType != null && 
            (contentType.startsWith("multipart/") || contentType.startsWith("application/octet-stream"))) {
            return true;
        }

        // Check for malicious patterns
        if (containsMaliciousContent(body)) {
            return false;
        }

        // JSON-specific validation
        if (contentType != null && contentType.contains("application/json")) {
            return isJsonContentSafe(body);
        }

        // XML-specific validation
        if (contentType != null && (contentType.contains("application/xml") || contentType.contains("text/xml"))) {
            return isXmlContentSafe(body);
        }

        return true;
    }

    private boolean containsMaliciousContent(String input) {
        if (input == null || input.trim().isEmpty()) {
            return false;
        }

        // Check against malicious patterns
        for (Pattern pattern : MALICIOUS_PATTERNS) {
            if (pattern.matcher(input).find()) {
                return true;
            }
        }

        return false;
    }

    private boolean isJsonContentSafe(String jsonBody) {
        try {
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode jsonNode = objectMapper.readTree(jsonBody);
            return validateJsonNode(jsonNode);
        } catch (Exception e) {
            logger.debug("Invalid JSON format: {}", e.getMessage());
            return false;
        }
    }

    private boolean validateJsonNode(JsonNode node) {
        if (node.isObject()) {
            Iterator<Map.Entry<String, JsonNode>> fields = node.fields();
            while (fields.hasNext()) {
                Map.Entry<String, JsonNode> field = fields.next();
                if (containsMaliciousContent(field.getKey()) || !validateJsonNode(field.getValue())) {
                    return false;
                }
            }
        } else if (node.isArray()) {
            for (JsonNode arrayElement : node) {
                if (!validateJsonNode(arrayElement)) {
                    return false;
                }
            }
        } else if (node.isTextual()) {
            return !containsMaliciousContent(node.asText());
        }
        return true;
    }

    private boolean isXmlContentSafe(String xmlBody) {
        // Basic check for XXE
        return !xmlBody.toLowerCase().contains("<!entity") && 
               !xmlBody.toLowerCase().contains("<!doctype");
    }

    private void blockRequest(HttpServletResponse response, String message) throws IOException {
        response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");

        String jsonResponse = String.format(
                "{\"error\":\"invalid_request\",\"message\":\"%s\",\"timestamp\":\"%s\"}",
                message, Instant.now().toString());

        response.getWriter().write(jsonResponse);
    }
}
